{"ast":null,"code":"var _jsxFileName = \"C:\\\\binance-websocket\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/** @format */\n\n// src/App.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport CryptoSelector from \"./components/CryptoSelector\";\nimport CryptoChart from \"./components/CryptoChart\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n_c = Container;\nconst App = () => {\n  _s();\n  const [selectedSymbol, setSelectedSymbol] = useState(\"ethusdt\"); // Default symbol\n  const [selectedInterval, setSelectedInterval] = useState(\"1m\"); // Default interval\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const ws = useRef(null);\n  const savedData = useRef({\n    ethusdt: [],\n    bnbusdt: [],\n    dotusdt: []\n  });\n\n  // WebSocket Connection Setup\n  useEffect(() => {\n    if (ws.current) {\n      ws.current.close();\n    }\n    const streamUrl = `wss://stream.binance.com:9443/ws/${selectedSymbol}@kline_${selectedInterval}`;\n    ws.current = new WebSocket(streamUrl);\n    ws.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n      const {\n        k: candlestick\n      } = message;\n      const newCandle = {\n        x: new Date(candlestick.t),\n        o: parseFloat(candlestick.o),\n        h: parseFloat(candlestick.h),\n        l: parseFloat(candlestick.l),\n        c: parseFloat(candlestick.c)\n      };\n      const updatedData = savedData.current[selectedSymbol].concat([newCandle]);\n      savedData.current[selectedSymbol] = updatedData;\n      setChartData({\n        datasets: [{\n          label: `${selectedSymbol.toUpperCase()} Candlestick Data`,\n          data: updatedData,\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1\n        }]\n      });\n    };\n    return () => ws.current.close();\n  }, [selectedSymbol, selectedInterval]);\n  const handleSymbolChange = symbol => {\n    setSelectedSymbol(symbol);\n    if (savedData.current[symbol].length > 0) {\n      setChartData({\n        datasets: [{\n          label: `${symbol.toUpperCase()} Candlestick Data`,\n          data: savedData.current[symbol],\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1\n        }]\n      });\n    }\n  };\n  const handleIntervalChange = interval => {\n    setSelectedInterval(interval);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Binance Live Market Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CryptoSelector, {\n      selectedSymbol: selectedSymbol,\n      onSymbolChange: handleSymbolChange,\n      selectedInterval: selectedInterval,\n      onIntervalChange: handleIntervalChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CryptoChart, {\n      chartData: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"VzblrG7u4QbE3c33LJ5YuW8PtJY=\");\n_c2 = App;\nexport default App; // Ensure this line is present\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","CryptoSelector","CryptoChart","styled","jsxDEV","_jsxDEV","Container","div","_c","App","_s","selectedSymbol","setSelectedSymbol","selectedInterval","setSelectedInterval","chartData","setChartData","datasets","ws","savedData","ethusdt","bnbusdt","dotusdt","current","close","streamUrl","WebSocket","onmessage","event","message","JSON","parse","data","k","candlestick","newCandle","x","Date","t","o","parseFloat","h","l","c","updatedData","concat","label","toUpperCase","borderColor","borderWidth","handleSymbolChange","symbol","length","handleIntervalChange","interval","children","fileName","_jsxFileName","lineNumber","columnNumber","onSymbolChange","onIntervalChange","_c2","$RefreshReg$"],"sources":["C:/binance-websocket/src/App.js"],"sourcesContent":["/** @format */\n\n// src/App.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport CryptoSelector from \"./components/CryptoSelector\";\nimport CryptoChart from \"./components/CryptoChart\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst App = () => {\n  const [selectedSymbol, setSelectedSymbol] = useState(\"ethusdt\"); // Default symbol\n  const [selectedInterval, setSelectedInterval] = useState(\"1m\"); // Default interval\n  const [chartData, setChartData] = useState({ datasets: [] });\n  const ws = useRef(null);\n  const savedData = useRef({ ethusdt: [], bnbusdt: [], dotusdt: [] });\n\n  // WebSocket Connection Setup\n  useEffect(() => {\n    if (ws.current) {\n      ws.current.close();\n    }\n\n    const streamUrl = `wss://stream.binance.com:9443/ws/${selectedSymbol}@kline_${selectedInterval}`;\n    ws.current = new WebSocket(streamUrl);\n\n    ws.current.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      const { k: candlestick } = message;\n\n      const newCandle = {\n        x: new Date(candlestick.t),\n        o: parseFloat(candlestick.o),\n        h: parseFloat(candlestick.h),\n        l: parseFloat(candlestick.l),\n        c: parseFloat(candlestick.c),\n      };\n\n      const updatedData = savedData.current[selectedSymbol].concat([newCandle]);\n      savedData.current[selectedSymbol] = updatedData;\n\n      setChartData({\n        datasets: [\n          {\n            label: `${selectedSymbol.toUpperCase()} Candlestick Data`,\n            data: updatedData,\n            borderColor: \"rgba(75, 192, 192, 1)\",\n            borderWidth: 1,\n          },\n        ],\n      });\n    };\n\n    return () => ws.current.close();\n  }, [selectedSymbol, selectedInterval]);\n\n  const handleSymbolChange = (symbol) => {\n    setSelectedSymbol(symbol);\n    if (savedData.current[symbol].length > 0) {\n      setChartData({\n        datasets: [\n          {\n            label: `${symbol.toUpperCase()} Candlestick Data`,\n            data: savedData.current[symbol],\n            borderColor: \"rgba(75, 192, 192, 1)\",\n            borderWidth: 1,\n          },\n        ],\n      });\n    }\n  };\n\n  const handleIntervalChange = (interval) => {\n    setSelectedInterval(interval);\n  };\n\n  return (\n    <Container>\n      <h1>Binance Live Market Data</h1>\n      <CryptoSelector\n        selectedSymbol={selectedSymbol}\n        onSymbolChange={handleSymbolChange}\n        selectedInterval={selectedInterval}\n        onIntervalChange={handleIntervalChange}\n      />\n      <CryptoChart chartData={chartData} />\n    </Container>\n  );\n};\n\nexport default App; // Ensure this line is present\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}