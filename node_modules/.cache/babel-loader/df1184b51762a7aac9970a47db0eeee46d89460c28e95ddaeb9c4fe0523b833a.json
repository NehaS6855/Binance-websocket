{"ast":null,"code":"var _s = $RefreshSig$();\n/** @format */\n\n// src/App.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport CryptoSelector from \"./components/CryptoSelector\";\nimport CryptoChart from \"./components/CryptoChart\";\nimport styled from \"styled-components\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst App = () => {\n  _s();\n  const [selectedSymbol, setSelectedSymbol] = useState(\"ethusdt\"); // Default symbol\n  const [selectedInterval, setSelectedInterval] = useState(\"1m\"); // Default interval\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const ws = useRef(null);\n  const savedData = useRef({\n    ethusdt: [],\n    bnbusdt: [],\n    dotusdt: []\n  });\n\n  // WebSocket Connection Setup\n  useEffect(() => {\n    // Close the previous connection if it exists\n    if (ws.current) {\n      ws.current.close();\n    }\n\n    // Construct the WebSocket URL using the selected symbol and interval\n    const streamUrl = `wss://stream.binance.com:9443/ws/${selectedSymbol}@kline_${selectedInterval}`;\n\n    // Create a new WebSocket connection\n    ws.current = new WebSocket(streamUrl);\n\n    // Handle incoming WebSocket messages\n    ws.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n      const {\n        k: candlestick\n      } = message;\n\n      // Create a new candle object\n      const newCandle = {\n        x: new Date(candlestick.t),\n        // Time of the candlestick\n        o: parseFloat(candlestick.o),\n        // Open price\n        h: parseFloat(candlestick.h),\n        // High price\n        l: parseFloat(candlestick.l),\n        // Low price\n        c: parseFloat(candlestick.c) // Close price\n      };\n\n      // Append new candlestick data\n      const updatedData = savedData.current[selectedSymbol].concat([newCandle]);\n      savedData.current[selectedSymbol] = updatedData;\n\n      // Update the chart data state\n      setChartData({\n        datasets: [{\n          label: `${selectedSymbol.toUpperCase()} Candlestick Data`,\n          data: updatedData,\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1\n        }]\n      });\n    };\n\n    // Clean up function to close the WebSocket connection when component unmounts\n    return () => ws.current.close();\n  }, [selectedSymbol, selectedInterval]); // Re-run the effect when symbol or interval changes\n\n  // Rest of the App component...\n};\n_s(App, \"VzblrG7u4QbE3c33LJ5YuW8PtJY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","CryptoSelector","CryptoChart","styled","Container","div","App","_s","selectedSymbol","setSelectedSymbol","selectedInterval","setSelectedInterval","chartData","setChartData","datasets","ws","savedData","ethusdt","bnbusdt","dotusdt","current","close","streamUrl","WebSocket","onmessage","event","message","JSON","parse","data","k","candlestick","newCandle","x","Date","t","o","parseFloat","h","l","c","updatedData","concat","label","toUpperCase","borderColor","borderWidth","_c","$RefreshReg$"],"sources":["C:/binance-websocket/src/App.js"],"sourcesContent":["/** @format */\n\n// src/App.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport CryptoSelector from \"./components/CryptoSelector\";\nimport CryptoChart from \"./components/CryptoChart\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst App = () => {\n  const [selectedSymbol, setSelectedSymbol] = useState(\"ethusdt\"); // Default symbol\n  const [selectedInterval, setSelectedInterval] = useState(\"1m\"); // Default interval\n  const [chartData, setChartData] = useState({ datasets: [] });\n  const ws = useRef(null);\n  const savedData = useRef({ ethusdt: [], bnbusdt: [], dotusdt: [] });\n\n  // WebSocket Connection Setup\n  useEffect(() => {\n    // Close the previous connection if it exists\n    if (ws.current) {\n      ws.current.close();\n    }\n\n    // Construct the WebSocket URL using the selected symbol and interval\n    const streamUrl = `wss://stream.binance.com:9443/ws/${selectedSymbol}@kline_${selectedInterval}`;\n\n    // Create a new WebSocket connection\n    ws.current = new WebSocket(streamUrl);\n\n    // Handle incoming WebSocket messages\n    ws.current.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      const { k: candlestick } = message;\n\n      // Create a new candle object\n      const newCandle = {\n        x: new Date(candlestick.t), // Time of the candlestick\n        o: parseFloat(candlestick.o), // Open price\n        h: parseFloat(candlestick.h), // High price\n        l: parseFloat(candlestick.l), // Low price\n        c: parseFloat(candlestick.c), // Close price\n      };\n\n      // Append new candlestick data\n      const updatedData = savedData.current[selectedSymbol].concat([newCandle]);\n      savedData.current[selectedSymbol] = updatedData;\n\n      // Update the chart data state\n      setChartData({\n        datasets: [\n          {\n            label: `${selectedSymbol.toUpperCase()} Candlestick Data`,\n            data: updatedData,\n            borderColor: \"rgba(75, 192, 192, 1)\",\n            borderWidth: 1,\n          },\n        ],\n      });\n    };\n\n    // Clean up function to close the WebSocket connection when component unmounts\n    return () => ws.current.close();\n  }, [selectedSymbol, selectedInterval]); // Re-run the effect when symbol or interval changes\n\n  // Rest of the App component...\n};\n"],"mappings":";AAAA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AAEtC,MAAMC,SAAS,GAAGD,MAAM,CAACE,GAAG;AAC5B;AACA;AACA;AACA,CAAC;AAED,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EACjE,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC;IAAEgB,QAAQ,EAAE;EAAG,CAAC,CAAC;EAC5D,MAAMC,EAAE,GAAGf,MAAM,CAAC,IAAI,CAAC;EACvB,MAAMgB,SAAS,GAAGhB,MAAM,CAAC;IAAEiB,OAAO,EAAE,EAAE;IAAEC,OAAO,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;;EAEnE;EACApB,SAAS,CAAC,MAAM;IACd;IACA,IAAIgB,EAAE,CAACK,OAAO,EAAE;MACdL,EAAE,CAACK,OAAO,CAACC,KAAK,CAAC,CAAC;IACpB;;IAEA;IACA,MAAMC,SAAS,GAAG,oCAAoCd,cAAc,UAAUE,gBAAgB,EAAE;;IAEhG;IACAK,EAAE,CAACK,OAAO,GAAG,IAAIG,SAAS,CAACD,SAAS,CAAC;;IAErC;IACAP,EAAE,CAACK,OAAO,CAACI,SAAS,GAAIC,KAAK,IAAK;MAChC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;MACtC,MAAM;QAAEC,CAAC,EAAEC;MAAY,CAAC,GAAGL,OAAO;;MAElC;MACA,MAAMM,SAAS,GAAG;QAChBC,CAAC,EAAE,IAAIC,IAAI,CAACH,WAAW,CAACI,CAAC,CAAC;QAAE;QAC5BC,CAAC,EAAEC,UAAU,CAACN,WAAW,CAACK,CAAC,CAAC;QAAE;QAC9BE,CAAC,EAAED,UAAU,CAACN,WAAW,CAACO,CAAC,CAAC;QAAE;QAC9BC,CAAC,EAAEF,UAAU,CAACN,WAAW,CAACQ,CAAC,CAAC;QAAE;QAC9BC,CAAC,EAAEH,UAAU,CAACN,WAAW,CAACS,CAAC,CAAC,CAAE;MAChC,CAAC;;MAED;MACA,MAAMC,WAAW,GAAGzB,SAAS,CAACI,OAAO,CAACZ,cAAc,CAAC,CAACkC,MAAM,CAAC,CAACV,SAAS,CAAC,CAAC;MACzEhB,SAAS,CAACI,OAAO,CAACZ,cAAc,CAAC,GAAGiC,WAAW;;MAE/C;MACA5B,YAAY,CAAC;QACXC,QAAQ,EAAE,CACR;UACE6B,KAAK,EAAE,GAAGnC,cAAc,CAACoC,WAAW,CAAC,CAAC,mBAAmB;UACzDf,IAAI,EAAEY,WAAW;UACjBI,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,OAAO,MAAM/B,EAAE,CAACK,OAAO,CAACC,KAAK,CAAC,CAAC;EACjC,CAAC,EAAE,CAACb,cAAc,EAAEE,gBAAgB,CAAC,CAAC,CAAC,CAAC;;EAExC;AACF,CAAC;AAACH,EAAA,CAxDID,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}